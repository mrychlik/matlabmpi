head	1.10;
access;
symbols;
locks; strict;
comment	@# @;


1.10
date	2018.10.22.23.23.41;	author marek;	state Exp;
branches;
next	1.9;

1.9
date	2018.10.22.23.23.08;	author marek;	state Exp;
branches;
next	1.8;

1.8
date	2018.10.22.23.23.02;	author marek;	state Exp;
branches;
next	1.7;

1.7
date	2018.10.22.23.17.04;	author marek;	state Exp;
branches;
next	1.6;

1.6
date	2018.10.22.23.16.52;	author marek;	state Exp;
branches;
next	1.5;

1.5
date	2018.10.22.23.15.54;	author marek;	state Exp;
branches;
next	1.4;

1.4
date	2018.10.22.23.11.20;	author marek;	state Exp;
branches;
next	1.3;

1.3
date	2018.10.22.23.11.14;	author marek;	state Exp;
branches;
next	1.2;

1.2
date	2018.10.22.23.09.57;	author marek;	state Exp;
branches;
next	1.1;

1.1
date	2018.10.10.03.24.51;	author marek;	state Exp;
branches;
next	;


desc
@@


1.10
log
@*** empty log message ***
@
text
@<p>
  This is a parallel implementation of the Icosian Hamilton Circuit
  Problem.  It is a re-write of the code available as a solution
  to <a href="../../../HomeworkSolutions/H3/InheritFromHandle">H3</a>.
</p>

<p>
  The parallelism is implemented in the method 'sim_aux' in the class
  tsp_solver (file <a href="tsp_solver.m">tsp_solver.m</a>).
</p>

<p>
  This implementation is based on the 'spmd' block and MPI
  constructs:
  <dl>
    <dt>labindex</dt>
    <dd>Gets the number (id) of the lab.</dd>
    <dt>labBarrier</dt>
    <dd>Waits for all threads to reach the barrier in their execution.</dd>
    <dt>gop (Global Operation)</dt>
    <dd>
      Peforms a reduction of the values local to threads to obtain a
      global value; for instance, it can be used to calculate sum or
      minimum across all threads.
    </dd>
  </dl>
</p>
  
<p>
  The word 'spmd' stands for 'Single Program, Multiple Data'.
  The program within the 'spmd' block executes in all worker threads
  (or labs, using MPI terminology). The number of
  labs is explicitly set up in the script
  <a href="icosian_script.m">icosian_script.m</a> to be 8.
  Otherwise, the default number of labs would be used,
  as set up by the MATLAB GUI menu Parallel &gt; Parallel Preferences.
</p>



@


1.9
log
@*** empty log message ***
@
text
@d17 1
a17 1
    <dd>Gets the number (id) of the lab</dd>
d19 1
a19 1
    <dd>Waits for all threads to reach the barrier in their execution</dd>
@


1.8
log
@*** empty log message ***
@
text
@d25 1
a25 1
      </dd>
@


1.7
log
@*** empty log message ***
@
text
@d14 13
a26 1
  constructs: labindex, labBarrier and gop (Global Operation).
@


1.6
log
@*** empty log message ***
@
text
@d2 3
a4 2
  This is a parallel implementation of the Icosian Hamilton Circuit Problem.
  It is a re-write of the code available as a solution to <a href="../../../HomeworkSolutions/H3/InheritFromHandle">H3</a>.
@


1.5
log
@*** empty log message ***
@
text
@d3 1
a3 1
  It is a re-write of the code available as a solution to <a href="../../../HomeworkSolutions/H3/InheritedFromHandle">H3</a>.
@


1.4
log
@*** empty log message ***
@
text
@d3 4
@


1.3
log
@*** empty log message ***
@
text
@a11 1
  
@


1.2
log
@*** empty log message ***
@
text
@d1 5
a5 3
This is a parallel implementation of the Icosian Hamilton Circuit Problem.
The parallelism is implemented in the method 'sim_aux' in the class
tsp_solver (file <a href="tsp_solver.m">tsp_solver.m</a>).
d7 15
a21 9
This implementation is based on the 'spmd' block.

The word 'spmd' stands for 'Single Program, Multiple Data'.
The program within the 'spmd' block executes in all worker threads
(or labs, using MPI terminology). The number of
labs is explicitly set up in the script
<a href="icosian_script.m">icosian_script.m</a> to be 8.
Otherwise, the default number of labs would be used,
as set up by the MATLAB GUI menu Parallel &gt; Parallel Preferences.
@


1.1
log
@Initial revision
@
text
@d1 16
a16 5
This version uses 'handle' as superclass of 'tsp_solver'.
The benefit is the ability to add 'listeners' (implement Observer pattern).
Listeners can 'observe' an object from a distance.
In this case, we observe the property 'best', and stop
iteration when 'best' has minimum energy (which we already know).
@
